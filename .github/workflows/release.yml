name: Release

on:
  push:
    tags:
      - 'v*'  # 当推送的标签以 "v" 开头时触发（例如 v1.0.0）

permissions: write-all

jobs:
  build:
    runs-on: ${{ matrix.os }}  # 在多个操作系统上运行

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]  # 定义操作系统矩阵

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22  # 指定 Node.js 版本

      # macOS 证书配置
      # - name: Setup macOS Certificates
      #   if: matrix.os == 'macos-latest'
      #   env:
      #     APPLE_CERT: ${{ secrets.APPLE_CERT_BASE64 }}
      #   run: |
      #     echo $APPLE_CERT | base64 --decode > certificate.p12
      #     security create-keychain -p mypassword build.keychain 
      #     security import certificate.p12 -k build.keychain -P ${{ secrets.APPLE_CERT_PASSWORD }} -T /usr/bin/codesign
      #     security default-keychain -s build.keychain
      #     security unlock-keychain -p mypassword build.keychain
      #     echo $(security find-identity -v -p codesigning)
      #     echo "✅ macOS 证书配置完成"

      # # Windows 证书配置
      # - name: Setup Windows Certificate
      #   if: matrix.os == 'windows-latest'
      #   env:
      #     WINDOWS_PFX: ${{ secrets.WINDOWS_PFX_BASE64 }}
      #   run: |
      #     echo $WINDOWS_PFX | base64 --decode > certificate.pfx
      #     echo "certificate.pfx 路径: ${{ github.workspace }}\certificate.pfx"

      # 3. 安装依赖
      - name: Install dependencies
        run: npm install --force

      # 4. 构建前端应用
      - name: Build Vue code
        run: npm run vbuild
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 进行身份验证

      # 5. 打包应用程序
      - name: Build and package
        env:
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          # WINDOWS_PFX_PATH: ./certificate.pfx
          # WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 进行身份验证
        run: npm run make
       
      # - name: Sign macOS App
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     sh sign.sh
      #     echo "✅ macOS 代码签名完成"

      # - name: Sign Windows App
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     osslsigncode sign -pkcs12 certificate.pfx -pass ${{ secrets.WINDOWS_PFX_PASSWORD }} -n "My App" -i "https://myapp.com" -in ./dist/win/*.exe -out ./dist/win/signed.exe
      #     echo "✅ Windows 代码签名完成"

      # 6. 发布到 GitHub Releases
      - name: Publish to GitHub Releases
        run: npm run publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}